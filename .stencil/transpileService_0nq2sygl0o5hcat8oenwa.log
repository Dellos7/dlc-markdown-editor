{"moduleFile":{"sourceFilePath":"/Users/david/Programacion/Stencil/dlc-markdown-editor/src/components/dlc-markdown-editor/editor-utils/stylers/italics-styler.ts","jsFilePath":"/Users/david/Programacion/Stencil/dlc-markdown-editor/src/components/dlc-markdown-editor/editor-utils/stylers/italics-styler.js","cmps":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":["/Users/david/Programacion/Stencil/dlc-markdown-editor/src/components/dlc-markdown-editor/editor-utils/stylers/bold-styler","/Users/david/Programacion/Stencil/dlc-markdown-editor/src/components/dlc-markdown-editor/editor-utils/stylers/surrounding-symbols-styler","/Users/david/Programacion/Stencil/dlc-markdown-editor/src/components/dlc-markdown-editor/editor-utils/selection-text-utils"],"originalCollectionComponentPath":null,"potentialCmpRefs":[]},"jsText":"import { BoldStyler } from './../stylers/bold-styler';\r\nimport { GenericSurroundingSymbolsStyler } from './surrounding-symbols-styler';\r\nimport { SelectionTextUtils } from '../selection-text-utils';\r\nexport class ItalicsStyler extends GenericSurroundingSymbolsStyler {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._symbol = '*';\r\n        this._styleRegExp = /^(\\*|_)(.*?)(\\*|_)$/;\r\n        this._halfStyleRegexp = /(\\*|_)(.*?)/;\r\n    }\r\n    style(_selectedText) {\r\n        let boldStyler = new BoldStyler();\r\n        return new Promise((resolve, _) => {\r\n            let insertText, textHasStyle = false;\r\n            if (boldStyler.hasStyle(_selectedText)) {\r\n                let textTmp = boldStyler.removeStyle(_selectedText);\r\n                textHasStyle = this.hasStyle(textTmp);\r\n                if (textHasStyle) {\r\n                    insertText = this.removeStyle(_selectedText);\r\n                }\r\n                else {\r\n                    textHasStyle =\r\n                        this.hasHalfStyle(SelectionTextUtils.getCharsBeforeSelection(this.editorElement, this._symbol.length)) &&\r\n                            this.hasHalfStyle(SelectionTextUtils.getCharsAfterSelection(this.editorElement, this._symbol.length));\r\n                    if (textHasStyle) {\r\n                        SelectionTextUtils.selectMoreText(this.editorElement, this._symbol.length, this._symbol.length);\r\n                        _selectedText = SelectionTextUtils.getSelectionText();\r\n                    }\r\n                    insertText = `${this._symbol}${_selectedText}${this._symbol}`;\r\n                }\r\n            }\r\n            else {\r\n                textHasStyle = this.hasStyle(_selectedText);\r\n                if (!textHasStyle) {\r\n                    textHasStyle =\r\n                        this.hasHalfStyle(SelectionTextUtils.getCharsBeforeSelection(this.editorElement, this._symbol.length)) &&\r\n                            this.hasHalfStyle(SelectionTextUtils.getCharsAfterSelection(this.editorElement, this._symbol.length));\r\n                }\r\n            }\r\n            resolve(insertText);\r\n        });\r\n    }\r\n}\r\n"}