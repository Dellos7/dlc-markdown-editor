{"moduleFile":{"sourceFilePath":"/Users/david/Programacion/Stencil/dlc-markdown-editor/src/components/dlc-markdown-editor/editor-utils/stylers/surrounding-symbols-styler.ts","jsFilePath":"/Users/david/Programacion/Stencil/dlc-markdown-editor/src/components/dlc-markdown-editor/editor-utils/stylers/surrounding-symbols-styler.js","cmps":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":[],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":["/Users/david/Programacion/Stencil/dlc-markdown-editor/src/components/dlc-markdown-editor/editor-utils/selection-text-utils"],"originalCollectionComponentPath":null,"potentialCmpRefs":[]},"jsText":"import { SelectionTextUtils } from '../selection-text-utils';\r\nexport class GenericSurroundingSymbolsStyler {\r\n    style(_selectedText) {\r\n        return new Promise((resolve, _) => {\r\n            let textHasStyle = this.hasStyle(_selectedText);\r\n            if (!textHasStyle) {\r\n                textHasStyle =\r\n                    this.hasHalfStyle(SelectionTextUtils.getCharsBeforeSelection(this.editorElement, this._symbol.length)) &&\r\n                        this.hasHalfStyle(SelectionTextUtils.getCharsAfterSelection(this.editorElement, this._symbol.length));\r\n                if (textHasStyle) {\r\n                    SelectionTextUtils.selectMoreText(this.editorElement, this._symbol.length, this._symbol.length);\r\n                    SelectionTextUtils.getSelectionText();\r\n                }\r\n            }\r\n            let insertText = textHasStyle ? this.removeStyle(_selectedText) : `${this._symbol}${_selectedText}${this._symbol}`;\r\n            resolve(insertText);\r\n        });\r\n    }\r\n    hasStyle(_selectedText) {\r\n        return this._styleRegExp.test(_selectedText);\r\n    }\r\n    hasHalfStyle(_selectedText) {\r\n        return this._halfStyleRegexp.test(_selectedText);\r\n    }\r\n    removeStyle(_selectedText) {\r\n        return _selectedText.substring(this._symbol.length, _selectedText.length - this._symbol.length);\r\n    }\r\n    setElement(element) {\r\n        this.editorElement = element;\r\n    }\r\n}\r\n"}