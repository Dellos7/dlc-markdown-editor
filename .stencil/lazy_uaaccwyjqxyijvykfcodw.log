import { createEvent as __stencil_createEvent } from "@stencil/core";
import { getConnect as __stencil_getConnect } from "@stencil/core";
import { getContext as __stencil_getContext } from "@stencil/core";
import { getElement as __stencil_getElement } from "@stencil/core";
import { Host as __stencil_Host } from "@stencil/core";
import { h as __stencil_h } from "@stencil/core";
import { registerInstance as __stencil_registerInstance } from "@stencil/core";
import { h } from '@stencil/core';
import marked from 'marked';
import { EditorShortcutUtils } from './editor-utils/shortcuts/editor-shortcut-utils';
import { DefaultStylerFactory } from './editor-utils/stylers/factory/default-styler-factory';
import { BoldStyler } from './editor-utils/stylers/bold-styler';
import { ItalicsStyler } from './editor-utils/stylers/italics-styler';
export class DlcMarkdownEditor {
    constructor(hostRef) {
        __stencil_registerInstance(this, hostRef);
        this.enableShortcuts = true;
    }
    componentWillLoad() {
    }
    componentDidLoad() {
        this.setEditorElement();
        this.prepareEditor();
        this.convertTextToMarkdownListener();
    }
    async bold() {
        this.stylerFactoryInterface.style(new BoldStyler());
    }
    async italics() {
        this.stylerFactoryInterface.style(new ItalicsStyler());
    }
    prepareEditor() {
        this.stylerFactoryInterface = new DefaultStylerFactory(this.editorEl);
        if (this.enableShortcuts) {
            let editorShortcutUtils = new EditorShortcutUtils(this.stylerFactoryInterface);
            editorShortcutUtils.exposeShortcuts();
        }
    }
    setEditorElement() {
        this.editorEl = this.el.shadowRoot.querySelector('.editor');
    }
    convertTextToMarkdownListener() {
        if (!this.editorEl) {
            this.setEditorElement();
        }
        this.editorEl.oninput = _ => {
            this.markdownText = marked(this.editorEl.value);
        };
    }
    render() {
        return (h("div", { class: "wrapper" }, h("div", { class: "buttons" }, h("button", { class: "button button-bold", onClick: _ => this.bold() }, "B"), h("button", { class: "button button-bold", onClick: _ => this.italics() }, "I")), h("textarea", { class: "editor", contenteditable: true, part: "editor" }), h("div", { class: "previewer", part: "previewer", innerHTML: this.markdownText })));
    }
    get el() { return __stencil_getElement(this); }
    static get style() { return "STYLE_TEXT_PLACEHOLDER:dlc-markdown-editor"; }
}
