/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface DlcMarkdownEditor {
    /**
    * Bold the selected text
    */
    'bold': () => Promise<void>;
    /**
    * Close the previewer
    */
    'closePreviewer': () => Promise<void>;
    /**
    * To set the content of the editor element (input, textarea...)
    */
    'content': string;
    /**
    * Count words
    */
    'countWords': () => Promise<number>;
    /**
    * We can pass in a custom element to handle the editor (<textarea>, <input> or an element that contains one of these)
    */
    'customEditorElement': HTMLInputElement | HTMLTextAreaElement;
    /**
    * Whether enable or not the keyboard shortcuts
    */
    'enableShortcuts': boolean;
    /**
    * Convert the selected text into an h1
    */
    'h1': () => Promise<void>;
    /**
    * Format the selected text into italics
    */
    'italics': () => Promise<void>;
    /**
    * Create a link onto the selected text
    */
    'link': () => Promise<void>;
    'previewerStyle': 'github';
    'removePreviewerClasses': (...classes: string[]) => Promise<void>;
    'setPreviewerClasses': (...classes: string[]) => Promise<void>;
    /**
    * Show the previewer
    */
    'showPreviewer': () => Promise<void>;
  }
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
}

declare global {


  interface HTMLDlcMarkdownEditorElement extends Components.DlcMarkdownEditor, HTMLStencilElement {}
  var HTMLDlcMarkdownEditorElement: {
    prototype: HTMLDlcMarkdownEditorElement;
    new (): HTMLDlcMarkdownEditorElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'dlc-markdown-editor': HTMLDlcMarkdownEditorElement;
    'my-component': HTMLMyComponentElement;
  }
}

declare namespace LocalJSX {
  interface DlcMarkdownEditor extends JSXBase.HTMLAttributes<HTMLDlcMarkdownEditorElement> {
    /**
    * To set the content of the editor element (input, textarea...)
    */
    'content'?: string;
    /**
    * We can pass in a custom element to handle the editor (<textarea>, <input> or an element that contains one of these)
    */
    'customEditorElement'?: HTMLInputElement | HTMLTextAreaElement;
    /**
    * Whether enable or not the keyboard shortcuts
    */
    'enableShortcuts'?: boolean;
    'previewerStyle'?: 'github';
  }
  interface MyComponent extends JSXBase.HTMLAttributes<HTMLMyComponentElement> {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }

  interface IntrinsicElements {
    'dlc-markdown-editor': DlcMarkdownEditor;
    'my-component': MyComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


